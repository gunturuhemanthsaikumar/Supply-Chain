pragma solidity >=0.4.21 < 0.7.0;

contract Reputation {
// call the Tracking contract at its deployed address need to include Tracking contract code at the end
    Tracking track =Tracking(0xd9145CCE52D386f254917e481eB44e9943F39138);
    address admin;
    mapping (address => Supplier) suppliers;
    address[] suppliersByAddress; // array of all suppliers' accounts
    
    struct Supplier {
        string name;
        uint phoneNo;
        string cityState;
        string country;
        string goodsType;
        uint reputation;
    }
    
    // constructor - runs once when contract is deployed
    function Reputation() {
        admin = msg.sender;
    }
    
    // modifier to allow only admin to execute a function
    modifier onlyAdmin() {
        if (msg.sender != admin) throw;
        _;
    }
    
    // function for supplier to add their details to database
    function addSupplier(string _name, uint _phoneNo, string _cityState, string _country, string _goodsType) returns (bool success){
        if (bytes(suppliers[msg.sender].name).length == 0 &&
            bytes(_name).length != 0) {
            suppliers[msg.sender].name = _name;
            suppliers[msg.sender].phoneNo = _phoneNo;
            suppliers[msg.sender].cityState = _cityState;
            suppliers[msg.sender].country = _country;
            suppliers[msg.sender].goodsType = _goodsType;
            suppliers [msg. sender] .reputation =
            track.calculateReputation(msg.sender);
            suppliersByAddress.push(msg.sender);
            return true;
        }
        else {
            return false; // either entry already exists or name entered was null
        }
    }
    
    // function to remove supplier from database (can only be done by admin)
    function removeSupplier(address _supplier) onlyAdmin returns (bool success) {
        delete suppliers[_supplier];
        for (uint i = 0; i < suppliersByAddress.length; i++) {
            if (suppliersByAddress[i] == _supplier) {
                for (uint index = i; index < suppliersByAddress.length- 1; index++) {
                        suppliersByAddress[index] =suppliersByAddress[index + 1];
                }
            delete suppliersByAddress[suppliersByAddress.length-1];
            suppliersByAddress.length--;
            }
        }
        return true;
    }

    function findSupplier(address _supplier) constant returns (string,uint,string,string,string,uint){
        return (suppliers[_supplier].name,
        suppliers[_supplier].phoneNo,suppliers[_supplier].cityState,
        suppliers[_supplier].country,suppliers[_supplier].goodsType,
        suppliers[_supplier].reputation);
    }

    function allSuppliers() constant returns (address[]) {
            return suppliersByAddress;
    }
    
    // function to search for suppliers by type of goods
    function filterByGoodsType(string _goodsType) constant returns (address[]) {
        address[] memory filteredGoods = new
        address [](suppliersByAddress. length);
        for (uint i = 0; i < suppliersByAddress.length; i++) {
            if (sha3(suppliers[suppliersByAddress[i]].goodsType) == sha3(_goodsType)) {
                filteredGoods[i] = suppliersByAddress[i];
            }
        }
        return filteredGoods;
    }

    function filterByReputation(uint _reputation) constant returns (address[]) {
        address[] memory filteredRep = new address [] (suppliersByAddress. length);
        for (uint i = 0; i < suppliersByAddress.length; i++) {
            if (suppliers[suppliersByAddress[i]].reputation >= _reputation) {
                filteredRep[i] = suppliersByAddress[i];
            }
        }
        return filteredRep;
    }

    function checkReputation(address _supplier) constant returns (uint) {
        return track.calculateReputation(_supplier);
    }
    
    // function to update reputations of all suppliers (calls Tracking contract)
    function updateReputations() onlyAdmin returns (bool success) {
        for (uint i = 0; i < suppliersByAddress.length; i++) {
            suppliers[suppliersByAddress[i]].reputation =  track.calculateReputation(suppliersByAddress[i]);
            }
        return true;
    }
}



// contract to allow supply chain parties to track shipment of goods and automatically execute payment in tokens
contract Tracking {
    address admin;
    uint[] contractLocation; // array containing lat & long
    uint contractLeadTime; // in seconds
    uint contractPayment; // in tokens
    mapping (string => Shipment) shipments;
    mapping (address => uint) balances;
    mapping (address => uint) totalShipped; // total number of shipments made
    mapping (address => uint) successShipped; // number of shipments successfully completed
    
    struct Shipment {
        string item;
        uint quantity;
        uint[] locationData;
        uint timeStamp;
        address sender;
        address receiver;
    }
    
    // events to display messages when certain transactions are executed
    event Success(string _message, string trackingNo, uint[] _locationData, uint _timeStamp, address _sender);
    event Payment(string _message, address _from, address _to,uint _amount);
    event Failure(string _message);
   
    function Tracking(uint _initialTokenSupply) {
        admin = msg.sender;
        balances[admin] = _initialTokenSupply; // all tokens he admin initially
    }

    // modifier to allow only admin to execute
    modifier onlyAdmin() {
        if (msg.sender != admin) throw;
        _;
    }
    
    // function to send tokens from one account to another
    function sendToken(address _from, address _to, uint _amount) returns (bool success) {
        if (balances[_from] < _amount) {
            Failure('Insufficient funds to send payment');
            return false;
        }
        balances[_from] -= _amount;
        balances[_to] += _amount;
        Payment('Payment sent', _from, _to, _amount);
        return true;
    }
    
    // function to show token balance of an account
    function getBalance(address _account) view returns (uint _balance) {
        return balances[_account];
    }
    
    function recoverToken(address _from, uint _amount) onlyAdmin returns (bool success) {
        if (balances[_from] < _amount) {
            Failure('Insufficient funds for recovery');
            return false;
        }
        balances[_from] -= _amount;
        balances[msg.sender] += _amount;
        Payment('Funds recovered', _from, msg.sender, _amount);
        return true;
    }
    
    // function to set contract parameters for next leg of shipment(can only be done by admin)
    function setContractParameters(uint[] _location, uint _leadTime, uint _payment) onlyAdmin returns (bool success) {
        contractLocation = _location; 
        contractLeadTime = _leadTime; 
        contractPayment = _payment; 
        return true;
    }
    
    // function for party to input details of shipment that was sent
    function sendShipment(string trackingNo, string _item, uint _quantity, uint[] _locationData) returns (bool success) {
        shipments[trackingNo].item = _item;
        shipments[trackingNo].quantity = _quantity;
        shipments[trackingNo].locationData = _locationData;
        shipments[trackingNo].timeStamp = block.timestamp;
        shipments[trackingNo].sender = msg.sender;
        totalShipped[msg.sender] += 1;
        Success('Item shipped', trackingNo, _locationData, block.timestamp, msg.sender);
        return true;
    }
    
    // function for party to input details of shipment that was received
    function receiveShipment(string trackingNo, string _item, uint _quantity, uint[] _locationData) returns (bool success) {
    // check that item and quantity received match item and quantity shipped
        if (sha3(shipments[trackingNo].item) == sha3(_item) && shipments[trackingNo].quantity == _quantity) {
            successShipped[shipments[trackingNo].sender] += 1;
            Success('Item received', trackingNo, _locationData, block.timestamp, msg.sender);
            // execute payment if item received on time and location correct
            if (block.timestamp <= shipments[trackingNo].timeStamp + contractLeadTime && _locationData[0] == contractLocation[0] && _locationData[1] == contractLocation[1]) {
                sendToken(shipments[trackingNo].sender, shipments[trackingNo].receiver, contractPayment);
            }
            else {
                Failure('Payment not triggered as criteria not met');
            }
        return true;
        }
        else {
            Failure('Error in item/quantity');
            return false;
        }
    }
    
    // function to remove details of shipment from database (can only be done by admin)
    function deleteShipment(string trackingNo) onlyAdmin returns (bool success) {
        delete shipments[trackingNo];
        return true;
        }
        
    // function to display details of shipment
    function checkShipment(string trackingNo) view returns (string, uint, uint[], uint, address) {
        return (shipments[trackingNo].item,
        shipments[trackingNo].quantity, shipments[trackingNo].locationData,
        shipments[trackingNo].timeStamp, shipments[trackingNo].sender);
    }
    
    // function to display number of successfully completed shipments and total shipments for a party
    function checkSuccess(address _sender) view returns (uint, uint) {
        return (successShipped[_sender], totalShipped[_sender]);
    }
    
    // function to calculate reputation score of a party (percentage of successfully completed shipments)
    function calculateReputation(address _sender) view returns (uint) {
        if (totalShipped[_sender] != 0) {
            return (100 * successShipped[_sender] / totalShipped[_sender]);
        }   
        else {
            return 0;
        } 
    }
}
